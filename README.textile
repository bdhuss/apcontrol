h1. apcontrol

An command line driven application I use to manage local wireless access point information.

h2. Clone and Compile

1. Navigate to the directory you wish to download the source to.
2. Clone the source with the following commandâ€¦

<pre>
<code>
	git clone git://github.com/BinaryBurnout/apcontrol.git
</code>
</pre>

3. Navigate to the .java source files and compile.

<pre>
<code>
	javac apcontrol.java
</code>
</pre>

h2.  Run HowTo

The application can easily be run like any other Java application from command line with @java apcontrol@. The MAN file outlines the commands 
and variables needed to operate the application and can be seen with @java apcontrol man@. Make sure the MAN file is in the same directory you 
are running the application from.

h3. MAN

<pre>
<code>
NAME:
	apcontrol - Organizes and manages a list of access points

SYNOPSIS:
	apcontrol [FUNCTION] [OPTIONS]

DESCRIPTION:
	This manual page documents BinaryBurnout's Access Point Control application. By default, it displays 
	the MASTER.lst file (which is by default the file that holds the access point information).

FUNCTIONS:

	add		- Adds new access point with the specified variables. Requires an ESSID and BSSID as
			  minimum. For a full input it requires all input in order: ESSID, BSSID, CHANNEL,
			  ENCRYPTION, CIPHER, KEY. If ENCRYPTION is OPEN, the input string should end there.

	display		- Displays MASTER.lst file. If [OPTIONS] are input, it will display what matches the 
                          [OPTIONS].

	man		- Displays the manual

	rm		- Removes access point specified [OPTIONS].

OPTIONS:

	-e, --essid
		Extended Service Set Identifier

	-b, --bssid
		Basic Service Set Identifier
		
	-ch, --channel
		Channel the access point broadcasts on. The channels can range from 1 to 14. Channels 1 
		through 11 are used in the US (channels 12 and 13 can be used in the US for IEEE 802.11b 
		only). Channels 1 through 13 are used in Japan (channel 14 is only used for IEEE 802.11b 
		and is only valid for DSSS and CCK modes). Channels 1 through 13 are used in the rest of 
		the world.
		
	-enc, --encryption
		Encryption method used could be one of the following...

		OPEN: Open (no encryption used)
		WEP:  Wired Equivalent Privacy
		WPA:  Wi-Fi Protected Access
		WPA2: Wi-Fi Protected Access Version 2

	-cipher
		Algorithm used for encryption and decryption. Could be one of the following...

		CCMP: Counter Mode with Cipher Block Chaining Message Authentication Code Protocol
		TKIP: Temporal Key Integrirt Protocol
		      * Both of the above use Pre-Shared Keys (PSK) *

	-key
		The encryption key used on access point.

EXAMPLES:

	apcontrol display -ch <channel>
		:: Displays all access points that broadcast on channel <channel>.
	
	apcontrol rm -e <essid>
		:: Removes access point with ESSID <essid>.

* ADD EXAMPLES: *

	apcontrol add -e <essid> -b <bssid>
		:: Minimum variables needed for add function. Adds new access point with ESSID <essid>
		   and BSSID <bssid>.

	apcontrol add -e <essid> -b <bssid> -ch <channel> -enc <encryption> -cipher <cipher> -key <key>
		:: Full add function.

	apcontrol add -e <essid> -b <bssid> -ch <channel> -enc open
		:: Open access point. This will add a new access point with specified variables and auto
		   add the CIPHER, AUTH and KEY variables as "---".

	apcontrol add -e <essid> -b <bssid> -ch <channel> -enc wep
		:: Adds access point with specified variables and ENCRYPTION WEP. Auto adds CIPHER as WEP,
		   AUTH as "---" and KEY as "???".

	apcontrol add -e <essid> -b <bssid> -ch <channel> -enc <wpa/wpa2> -cipher <ccmp/tkip>
		:: Adds access point with specified varables and ENCRYPTION WPA or WPA2 and CIPHER CCMP or
		   TKIP. Auto adds AUTH as PSK and KEY as "???".
</code>
</pre>

h2. Sample Output

* @java apcontrol display@

<pre>
<code>
#================================================================================
#ESSID:         BSSID:                  CH: ENC: CIPHER: AUTH:  KEY:
#--------------------------------------------------------------------------------
1P2N7           00:18:01:FE:A1:50       1   WEP  WEP     ---    ???
82K85           00:1F:90:A1:E8:C5       6   WEP  WEP     ---    ???
btwmain         00:1F:90:E5:99:2E       6   WPA2 CCMP    PSK    ???
I9J01           00:1F:90:E6:FC:FE       11  WEP  WEP     ---    ???
K7FQR           00:1F:90:C7:DD:20       1   WEP  WEP     ---    ???
linksys         00:18:F8:18:E8:C5       6   OPN  ---     ---    ???
P0QQ1-9929      00:18:01:EB:7A:23       11  WEP  WEP     ---    ???
R06D0           00:18:01:09:86:ED       11  WEP  WEP     ---    ???
wireless        00:0C:41:D2:F9:E7       6   OPN  ---     ---    ???
Zelda           00:22:3F:23:B9:9E       11  WPA  TKIP    PSK    ???
</code>
</pre>

* @java apcontrol display -enc WEP@

<pre>
<code>
#================================================================================
#ESSID:         BSSID:                  CH: ENC: CIPHER: AUTH:  KEY:
#--------------------------------------------------------------------------------
1P2N7           00:18:01:FE:A1:50       1   WEP  WEP     ---    ???
82K85           00:1F:90:A1:E8:C5       6   WEP  WEP     ---    ???
I9J01           00:1F:90:E6:FC:FE       11  WEP  WEP     ---    ???
K7FQR           00:1F:90:C7:DD:20       1   WEP  WEP     ---    ???
P0QQ1-9929      00:18:01:EB:7A:23       11  WEP  WEP     ---    ???
R06D0           00:18:01:09:86:ED       11  WEP  WEP     ---    ???
</code>
</pre>

h2. TODO

* <b>ADD:</b> Support for CCMP & TKIP cipher on one network.
* <b>ADD:</b> Function to verify validity of BSSID hex key mac address's.
* <b>ADD:</b> Sort capabilities for something other than ESSID's.

h2. Copyright

Copyright (c) 2009 Bryan Huss. See LICENSE for details.
